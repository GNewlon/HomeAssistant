blueprint:
  name: Inovelli Red Series LZW36 Fan Controller (ZWave-JS)
  description: Create automations for the Inovelli Fan/Switch combo the ZWave-JS integration.
  domain: automation
  input:
    inovelli_fan_switch:
      name: Inovelli FanController
      description: List of available Inovelli LZW36 dimmer combos.
      selector:
        device:
          integration: zwave_js
          manufacturer: Inovelli
          model: LZW36
    button_a:
      name: Button A - Up/On press 1x
      description: Action to run, when the button is pressed one time.
      default: []
      selector:
        action: {}
    button_b:
      name: Button B - Down/Off press 1x
      description: Action to run, when the button is pressed one time.
      default: []
      selector:
        action: {}
    button_a_held:
      name: Button A - Up/On held down
      description: Action to run, when the button is held down.
      default: []
      selector:
        action: {}
    button_b_held:
      name: Button B - Down/Off held down
      description: Action to run, when the button is held down.
      default: []
      selector:
        action: {}
    button_a2:
      name: Button A - Up/On press 2x
      description: Action to run, when the button is pressed two times.
      default: []
      selector:
        action: {}
    button_b2:
      name: Button B - Down/Off press 2x
      description: Action to run, when the button is pressed two times.
      default: []
      selector:
        action: {}
    button_a3:
      name: Button A - Up/On press 3x
      description: Action to run, when the button is pressed three times.
      default: []
      selector:
        action: {}
    button_b3:
      name: Button B - Down/Off press 3x
      description: Action to run, when the button is pressed three times.
      default: []
      selector:
        action: {}
    button_a4:
      name: Button A - Up/On press 4x
      description: Action to run, when the button is pressed four times.
      default: []
      selector:
        action: {}
    button_b4:
      name: Button B - Down/Off press 4x
      description: Action to run, when the button is pressed four times.
      default: []
      selector:
        action: {}
    button_a5:
      name: Button A - Up/On press 5x
      description: Action to run, when the button is pressed five times.
      default: []
      selector:
        action: {}
    button_b5:
      name: Button B - Down/Off press 5x
      description: Action to run, when the button is pressed five times.
      default: []
      selector:
        action: {}
    button_c1:
      name: Button C - Up/Increase (Top)
      description: Action to run, when the light rocker is pressed up.
      default: []
      selector:
        action: {}
    button_c2:
      name: Button C - Down/Decrease (Top)
      description: Action to run, when the light rocker is pressed down.
      default: []
      selector:
        action: {}
    button_d1:
      name: Button D - Up/Increase (Bottom)
      description: Action to run, when the fan rocker is pressed up.
      default: []
      selector:
        action: {}
    button_d2:
      name: Button D - Down/Decrease (Bottom)
      description: Action to run, when the fan rocker is pressed down.
      default: []
      selector:
        action: {}
  source_url: https://community.home-assistant.io/t/zwave-js-inovelli-lzw36-fan-switch-dimmer/277704
mode: single
max_exceeded: silent
variables:
  device_id: !input 'inovelli_fan_switch'
trigger:
- platform: event
  event_type: zwave_js_value_notification
condition: '{{ trigger.event.data.device_id == device_id }}'
action:
- variables:
    button_id: '{{ trigger.event.data.property_key_name }}'
    press_count: '{{ trigger.event.data.value }}'
- service: logbook.log
  data:
    name: Button Id
    message: '{{ button_id }}'
- service: logbook.log
  data:
    name: Press Count
    message: '{{ press_count }}'
- service: logbook.log
  data:
    name: Device
    message: '{{ zwave_device }}'
- choose:
  - conditions: '{{ button_id == "002" and press_count == "KeyPressed" }}'
    sequence: !input 'button_a'
  - conditions: '{{ button_id == "001" and press_count == "KeyPressed" }}'
    sequence: !input 'button_b'
  - conditions: '{{ button_id == "002" and press_count == "KeyHeldDown" }}'
    sequence: !input 'button_a_held'
  - conditions: '{{ button_id == "001" and press_count == "KeyHeldDown" }}'
    sequence: !input 'button_b_held'
  - conditions: '{{ button_id == "002" and press_count == "KeyPressed2x" }}'
    sequence: !input 'button_a2'
  - conditions: '{{ button_id == "001" and press_count == "KeyPressed2x" }}'
    sequence: !input 'button_b2'
  - conditions: '{{ button_id == "002" and press_count == "KeyPressed3x" }}'
    sequence: !input 'button_a3'
  - conditions: '{{ button_id == "001" and press_count == "KeyPressed3x" }}'
    sequence: !input 'button_b3'
  - conditions: '{{ button_id == "002" and press_count == "KeyPressed4x" }}'
    sequence: !input 'button_a4'
  - conditions: '{{ button_id == "001" and press_count == "KeyPressed4x" }}'
    sequence: !input 'button_b4'
  - conditions: '{{ button_id == "002" and press_count == "KeyPressed5x" }}'
    sequence: !input 'button_a5'
  - conditions: '{{ button_id == "001" and press_count == "KeyPressed5x" }}'
    sequence: !input 'button_b5'
  - conditions: '{{ button_id == "003" and press_count == "KeyPressed" }}'
    sequence: !input 'button_c1'
  - conditions: '{{ button_id == "004" and press_count == "KeyPressed" }}'
    sequence: !input 'button_c2'
  - conditions: '{{ button_id == "005" and press_count == "KeyPressed" }}'
    sequence: !input 'button_d1'
  - conditions: '{{ button_id == "006" and press_count == "KeyPressed" }}'
    sequence: !input 'button_d2'
